#!/usr/bin/env python3
import sys
import pslib
import os

def main():
    
    if len(sys.argv) < 2:
        pslib.helpSynclite()
        return

    arg1 = sys.argv[1]
    arg2 = sys.argv[2] if len(sys.argv) > 2 else None
    arg3 = sys.argv[3] if len(sys.argv) > 3 else None

    # if not os.path.exists('~/.config/psynclite') and arg1 != 'init':
    #     print('You have not initialized. Use command: pscli init')
    #     return 1

    commands = {
        '-h': pslib.helpSynclite,
        '--help': pslib.helpSynclite,
        '-v': pslib.verison,
        '--version': pslib.verison,
        '--system-prop': pslib.system,
        '-sp': pslib.system,
        '--pac-pkg': pslib.pacman_pkg,
        '-pp': pslib.pacman_pkg,
        '--wlogout': pslib.wlogout,
        '-wo': pslib.wlogout,
        '--backup': pslib.backup,
        '-bu': pslib.backup,
        '--wallpaper': pslib.wallpaper,
        '-wp': pslib.wallpaper,
        '--tog-waybar': pslib.toggleWaybar,
        '-tw': pslib.toggleWaybar,
        '--printscreen': pslib.printscreen,
        '-ps': pslib.printscreen,
	    '--show-notifyhistory': pslib.show_notification_history,
	    '-snh': pslib.show_notification_history,
        'init': pslib.init
    }

    multi_level_commands = {
        '-V': {'inc': pslib.vol_inc, 'dec': pslib.vol_dec},
        '-B': {'inc': pslib.bri_inc, 'dec': pslib.bri_dec},
        '-Ai': {'model': pslib.aimodel, 'get-key': pslib.get_api_key},
        '-M': {
            'duration': {'minsec': pslib.duration_minsec, 'seconds': pslib.duration_sec},
            'position': {'minsec': pslib.position_minsec, 'seconds': pslib.position_sec},
            'player': {'toggle': pslib.playpause, 'previous': pslib.playerprevious, 'next': pslib.playernext}
        }
    }

    if arg1 in commands:
        commands[arg1]()
    elif arg1 in multi_level_commands:
        if arg2 in multi_level_commands[arg1]:
            if isinstance(multi_level_commands[arg1][arg2], dict):
                if arg3 in multi_level_commands[arg1][arg2]:
                    multi_level_commands[arg1][arg2][arg3]()
                else:
                    print(f"{pslib.COLORS['red']}Have you entered an invalid argument or not at all? Argument is {arg3}{pslib.COLORS['reset']}")
            else:
                multi_level_commands[arg1][arg2]()
        else:
            print(f"{pslib.COLORS['red']}Have you entered an invalid argument or not at all? Argument is {arg2}{pslib.COLORS['reset']}")
            pslib.helpSynclite()
    else:
        if ' ' in arg1:
            print(f"{pslib.COLORS['green']}Go to request to AI{pslib.COLORS['reset']}")
            pslib.aiapi(arg1)
        else:
            print(f"{pslib.COLORS['green']}Have you entered an invalid argument or not at all? Argument is {arg1}{pslib.COLORS['reset']}")
            pslib.helpSynclite()

if __name__ == "__main__":
    main()
